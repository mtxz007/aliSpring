04spring4_hello:
    控制：指 谁来控制对象 的创建；传统的应用程序的对象的创建是由程序本身控制的。
    使用spring后，是由spring来创建对象的。 为了实现解耦等
    反转：正传指程序来创建对象，反转指程序本身不去创建对象，而变为被动接受的对象

    总结：以前对象是由程序本身来创建，使用spring后，程序变为被动接收spring创建好的对象。
    控制反转----依赖注入（dependency injection）
    Ioc是一种编程思想。由主动的编程变为被动的接收；
    Ioc的实现是通过ioc容器来实现的，Ioc容器----BeanFactory

04spring4_ioc3:
    使用ioc来创建对象有3种方法：
        1.通过无参的构造方法来创建对象
            User.java
            beans.xml
        2.通过有参的构造方法来创建对象
            User2.java
            beans2.xml
                .xml配置
                    第一种 根据参数的下标来设置  index="0"
                    第二种 根据参数名称来设置    name="name"
                    第三种 根据参数类型来设置    type="java.lang.String"
        3.通过工厂方法来创建对象
            静态工厂    UserFactory.java    beans3.xml
            动态工厂    UserDynamicFactory  beans3.xml

    配置文件讲解：     beans3.xml  &   02spring4_hello\beans.xml
        1.alias为bean设置别名；可以设置多个别名
        2.bean的配置
        3.团队协作通过import来实现

05spring4_di:
依赖注入DI：
    1.依赖注入--dependency injection
        依赖：指bean对象依赖于容器。Bean对象依赖资源
        注入：指bean对象依赖的资源由容器来设置和装配
    2.spring注入--构造器注入
        见ioc创建对象
    3.*spring注入--setter注入
        *要求被注入的属性必须有set方法。set方法的方法名由set+属性首字母大写，如果属性是boolean，没有get方法，是is。
        beans.xml
            a)常量注入
            b)bean注入
            c)数组注入
            d)List注入
            e)Map注入
            f)Set注入
            g)NUll注入
            h)Properties注入
            i)P命名空间注入   需要在头文件中加入xmlns:p="http://www.springframework.org/schema/p"
            j)C命名空间注入   需要在头文件中加入xmlns:c="http://www.springframework.org/schema/c"  要求有对应的参数的构造方法

        bean的作用域--Bean scopes(有scope属性来配置bean的作用域)
            singleton单列 整个容器中只有一个对象实例（默认）
            prototype原型 每次使用获取bean都产生一个新的对象
            request 每次请求时创建一个新的对象
            session 在会话的范围内是一个对象
            global session 只在portlet下有用，表示application
            application 在应用范围中的一个对象
            *注意：在整合struts2和spring时需要将action设为scope="prototype"

Spring--桥梁
Spring--轻量级，易学，ioc，aop，事务，整合框架等
Spring--ioc
Spring--di

06spring4_autowiring:
    自动装配--简化spring配置文件
    beans.xml
        在配置bean时，可以配置bean的autowire属性，用于指定装配类型
        autowire自动装配(Autowiring modes) 简化spring配置
            no 不使用（默认）
            byName 根据名称（set方法名来的）去查找相应的bean，如果有则装配上
            byType 根据类型进行自动装配 不用管bean的id
                   但是同一种类型的bean只能有一个（比如不能同时有mysqlDao和oracleDao） 所以建议慎用byType
            constructor 当通过构造器注入实例化bean时 使用byType的方式装配构造方法
        可以配置全局的自动装配类型，在头部配置default-autowire
        推荐不使用自动装配，而使用annotation（后面讲）。

07spring4_staticproxy:
    1.静态代理的角色分析：
        cn.sxt.staticproxy
        抽象角色--一般使用接口或者抽象类来实现        Rent.java
        真实角色--被代理的角色        Host.java
        代理角色--代理真实角色——代理真实角色后一般会做一些附属操作     Proxy.java
        客户--使用代理角色来进行一些操作       Client.java
    2.实现    ⬆
    3.使用静态代理：
        cn.sxt.service
        优点：
            使得真实角色处理的业务更加纯粹，不再去关注一些公共的事情
            公共的业务由代理来完成--实现了业务的分工
            公共业务发生扩展时变得更加集中和方便
        缺点：
            类多了--多了代理类  工作量变大了  开发效率降低了
        ⬇
        ----动态代理

08spring4_dynamicproxy:
    1.动态代理和静态代理的角色是一样的
    2.动态代理的代理类是动态生成的
    3.分为两类，基于接口的动态代理 和 基于类的动态代理
        a)基于接口的动态代理--jdk动态代理
        b)基于类的动态代理--cglib
        现在（15年）用javassist来生成动态代理
    4.jdk的动态代理--Proxy类和InvocationHandler接口
        见API
        InvocationHandler是 代理实例的 调用处理程序 实现的接口。
        每个代理实例都有一个关联的调用处理程序。当代理实例调用方法时，    \
        将对方法调用进行编码并将其指派到它的调用处理程序的invoke方法。
            Object invoke(Object proxy, 方法 method, Object[] args)   在代理实例上处理方法调用，并返回结果。
                在代理实例上处理方法调用，并返回结果。当在与它关联的代理实例上调用方法时，该方法将在调用处理程序上调用此方法。
                参数
                proxy -代理实例，调用的方法
                对接口方法的调用相应的 method代理实例的 方法实例。声明类的 方法对象将接口的方法声明，这可能是一个超接口代理接口，代理类继承的方法。
                args -包含在方法上通过代理实例调用的实参的值对象的数组，或 null如果接口方法不需要参数。原始类型的实参是包裹在适当的原始包装类的实例，如 java.lang.Integer或 java.lang.Boolean。
        Proxy创建动态代理类的实例提供了静态方法，也是所有动态代理类的父类的方法创建。
            static Object newProxyInstance(ClassLoader loader, class<?>[] interfaces, InvocationHandler h)
            返回指定的接口，将方法调用指定的调用处理程序的代理类的一个实例。
    5.实现   cn.sxt.dynamicproxy  ProxyInovationHandler.java  Client.java
        一个动态代理一般代理某一类业务 一个动态代理可以代理多个类。


09spring4_aop1:
    1.aop:aspect oriented programming   面向切面编程
    2.aop在spring中的作用：
        提供声明式服务（声明式事务）
        允许用户实现自定义切面
    3.aop的由来：在不改变原有代码的情况下增加新的功能
        传统的编程模式：jsp -> Action -> service -> dao
        Aop的编程模式：横向的编程
    4.aop的好处：
        a)使得真实角色处理的业务更加纯粹，不再去关注一些公共的事情
        b)公共的业务由代理来完成--实现了业务的分工
        c)公共业务发生扩展时变得更加集中和方便
    5.名词解释：
        关注点：增加的某个业务。如日志，安全，缓存，事务等。
        切面(Aspect)：一个关注点的模块化
        通知(Advice)：在切面的某个特定的连接点上执行的动作。
        织入(Weaving)：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。
    6.使用spring实现aop
        a)通过springAPI来实现
            Log.java--前置通知  AfterLog.java--后置通知 UserServiceImpl.java--目标类   beans.xml--配置文件 Test.java--测试类
        spring aop就是将公共的业务(如日志，安全)和领域业务结合。当执行领域业务时将会把公共业务加进来。
        实现公共业务的重复利用。领域业务更纯粹了。程序员专注于领域业务。其本质还是动态代理。
        b)通过自定义类来实现     10spring4_aop2
        c)通过注解来实现

回顾：
    领域业务----领域模型，支付业务----接入第三方接口----安全检查----身份验证







